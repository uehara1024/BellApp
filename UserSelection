import { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Bell, Search, ArrowLeft, Loader2, User } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import UserCard from "../components/bell/UserCard";

export default function UserSelection() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [user, setUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const getUser = async () => {
      try {
        const currentUser = await base44.auth.me();
        setUser(currentUser);
      } catch (error) {
        navigate(createPageUrl("Home"));
      } finally {
        setIsLoading(false);
      }
    };
    getUser();
  }, [navigate]);

  const { data: allUsers = [] } = useQuery({
    queryKey: ['users'],
    queryFn: () => base44.entities.User.list(),
    enabled: !!user,
    initialData: [],
  });

  const sendBellMutation = useMutation({
    mutationFn: (selectedUser) => 
      base44.entities.BellNotification.create({
        from_email: user.email,
        from_name: user.full_name,
        to_email: selectedUser.email,
        status: "pending"
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['bellNotifications'] });
      navigate(createPageUrl("Home"));
    },
  });

  const filteredUsers = allUsers
    .filter(u => u.email !== user?.email)
    .filter(u => 
      u.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      u.email?.toLowerCase().includes(searchTerm.toLowerCase())
    );

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <Loader2 className="w-8 h-8 animate-spin text-amber-600" />
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        {/* ヘッダー */}
        <div className="mb-8">
          <Button
            variant="ghost"
            onClick={() => navigate(createPageUrl("Home"))}
            className="mb-4 hover:bg-amber-50"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            戻る
          </Button>
          
          <h2 className="text-3xl font-bold text-gray-800 mb-2">
            呼び出す相手を選択
          </h2>
          <p className="text-gray-600">ベルを鳴らして会話を始めましょう</p>
        </div>

        {/* 検索バー */}
        <div className="mb-6">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
            <Input
              type="text"
              placeholder="名前またはメールアドレスで検索..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 py-6 text-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400"
            />
          </div>
        </div>

        {/* ユーザーリスト */}
        <div className="space-y-3">
          {filteredUsers.length > 0 ? (
            <AnimatePresence>
              {filteredUsers.map((selectedUser) => (
                <UserCard
                  key={selectedUser.id}
                  user={selectedUser}
                  onSelect={() => sendBellMutation.mutate(selectedUser)}
                  isLoading={sendBellMutation.isPending}
                />
              ))}
            </AnimatePresence>
          ) : (
            <Card className="border-dashed border-2 border-gray-200">
              <CardContent className="py-12 text-center">
                <User className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">
                  {searchTerm ? "検索結果が見つかりません" : "ユーザーが見つかりません"}
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </motion.div>
    </div>
  );
}
